{"version":3,"sources":["logo.svg","favicon copy.ico","StateProvider.js","message.js","firebase.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","message","forwardRef","ref","user","username","isUser","displayName","console","log","className","Card","CardContent","Typography","component","color","variant","Avatar","src","profilepic","image","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","token","useState","input","setInput","setPath","setMessage","imageUrl","setImageUrl","url","setUrl","theme","localStorage","getItem","getStorageTheme","setTheme","React","useEffect","document","documentElement","setItem","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","event","add","timestamp","FieldValue","serverTimestamp","photoURL","onClick","FormControl","placeholder","onChange","target","htmlFor","style","display","name","type","e","files","Fab","size","aria-label","IconButton","disabled","FormData","append","fetch","method","body","then","res","json","catch","err","preventDefault","key","actionTypes","state","action","Login","dispatch","signInWithPopup","result","refreshToken","JSON","stringify","error","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d895c25e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/favicon copy.05ea36a5.ico\";","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","\r\nimport React, { forwardRef } from 'react';\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nimport { CardContent,Typography,Card } from '@material-ui/core';\r\nimport  './Message.css';\r\nimport { useStateValue } from \"./StateProvider\";\r\nconst message = forwardRef(({message,username,user}, ref) => {\r\n  \r\n\r\n  const isUser= user.displayName === message.username;\r\n\r\n\r\n    console.log(user)\r\n    console.log(message)\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n\r\n\r\n<Card className={isUser ? \"message_useCard\" :  \"message_guestCard\"}>\r\n      <CardContent >\r\n        <Typography \r\n        component=\"h2\"\r\n         color=\"white\"\r\n         variant=\"h5\"\r\n         >\r\n           <div className=\"finalmessage\">\r\n            <Avatar src={message.profilepic} className=\"post_avatar\" />\r\n        {!isUser && `${message.username || 'Unknown User'} : `}{message.message}\r\n        </div>\r\n        {message.image && \r\n          \r\n          <img src={message.image} />\r\n           \r\n          }\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n\r\n        \r\n        </div>\r\n    );\r\n})\r\n\r\nexport default message;\r\n","import React from 'react';\r\nimport firebase from 'firebase';\r\n\r\n\r\nvar firebaseConfig = {\r\n   \r\n        apiKey: \"AIzaSyBn_TFqeX0i5UIYKw-UwRFZvWCsSrGXHok\",\r\n        authDomain: \"facebook-messenger-clone-3673b.firebaseapp.com\",\r\n        databaseURL: \"https://facebook-messenger-clone-3673b.firebaseio.com\",\r\n        projectId: \"facebook-messenger-clone-3673b\",\r\n        storageBucket: \"facebook-messenger-clone-3673b.appspot.com\",\r\n        messagingSenderId: \"14384352743\",\r\n        appId: \"1:14384352743:web:da3371c9c3e285b313c142\",\r\n        measurementId: \"G-MXP1RTK38J\"\r\n      \r\n};\r\n\r\n\r\n\r\nconst firebaseApp= firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore()\r\n  const auth = firebase.auth()\r\n  const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  export{auth,provider};\r\n  \r\n\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport {\r\n  FormControl,\r\n  Button,\r\n  InputLabel,\r\n  Input,\r\n  FormHelperText,\r\n  ClickAwayListener,\r\n} from \"@material-ui/core\";\r\nimport Message from \"../src/message\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport M from \"materialize-css\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport { Fab } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport \"./Chat.css\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst getStorageTheme = () => {\r\n  let theme = 'light-theme';\r\n  if (localStorage.getItem('theme')) {\r\n    theme = localStorage.getItem('theme');\r\n  }\r\n  return theme;\r\n};\r\n\r\n\r\nfunction Chat() {\r\n  const [{ user, token }, dispatch] = useStateValue();\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [path, setPath] = useState(\"\");\r\n  const [message, setMessage] = useState([]);\r\n  const [username, setUsername] = useState();\r\n\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [url, setUrl] = useState(\"\");\r\n  const [theme, setTheme] = useState(getStorageTheme());\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  \r\n\r\n  /* useEffect(()=>{\r\n    setUsername(prompt('please enter your name'))\r\n    \r\n    },[])\r\n */\r\nconst toggleTheme = () => {\r\n  if (theme === 'light-theme') {\r\n    setTheme('dark-theme');\r\n  } else {\r\n    setTheme('light-theme');\r\n  }\r\n};\r\nuseEffect(() => {\r\n  document.documentElement.className = theme;\r\n  localStorage.setItem('theme', theme);\r\n}, [theme]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"messages\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        setMessage(\r\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\r\n        );\r\n        console.log(snapshot.docs.map((doc) => ({ id: doc.id })));\r\n      });\r\n  }, []);\r\n\r\n  useEffect(\r\n    (event) => {\r\n      if (url) {\r\n        db.collection(\"messages\").add({\r\n          message: input,\r\n          username: user.displayName,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          image: url,\r\n          profilepic: user.photoURL,\r\n        });\r\n\r\n        setInput(\"\");\r\n        setUrl(\"\");\r\n        setImageUrl(\"\");\r\n      }\r\n    },\r\n    [url]\r\n  );\r\n\r\n  console.log(message);\r\n\r\n  const PostDetails = (e) => {\r\n    if (imageUrl) {\r\n      const data = new FormData();\r\n      data.append(\"file\", imageUrl);\r\n      data.append(\"upload_preset\", \"insta-clone\");\r\n      data.append(\"cloud_name\", \"esprit\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/hamma/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setUrl(data.url);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n      e.preventDefault();\r\n    } else {\r\n      db.collection(\"messages\").add({\r\n        message: input,\r\n        username: user.displayName,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n\r\n        profilepic: user.photoURL,\r\n      });\r\n\r\n      setInput(\"\");\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  console.log(message);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" />\r\n      <h1>hello programmers </h1>\r\n      <h3>welcome {user.displayName} </h3>\r\n      <button className=\"btn\" onClick={toggleTheme}>change theme</button>\r\n      <form className=\"app_form\">\r\n        <FormControl className=\"app_formcontrol\">\r\n          {/* <InputLabel htmlFor=\"my-input\">Email address</InputLabel> */}\r\n          <input\r\n            className=\"app_input\"\r\n            placeholder=\"Enter a message...\"\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n          />\r\n          {/* <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText> */}\r\n\r\n          <label htmlFor=\"upload-photo\">\r\n            <input\r\n              style={{ display: \"none\" }}\r\n              id=\"upload-photo\"\r\n              name=\"upload-photo\"\r\n              type=\"file\"\r\n              onChange={(e) => {\r\n                setImageUrl(e.target.files[0]);\r\n                setPath(e.target.value);\r\n              }}\r\n            />\r\n            <Fab color=\"primary\" size=\"small\" component=\"span\" aria-label=\"add\">\r\n              <PhotoIcon />\r\n            </Fab>\r\n          </label>\r\n\r\n          <IconButton\r\n            className=\"app_iconbutton\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!input}\r\n            onClick={PostDetails}\r\n          >\r\n            <SendIcon />\r\n          </IconButton>\r\n        </FormControl>\r\n      </form>\r\n\r\n      <FlipMove>\r\n        {message.map(({ id, message }) => (\r\n          <Message key={id} username={username} message={message} user={user} />\r\n        ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","\r\nexport const initialState = {\r\n  user: null,\r\n  token:null,\r\n\r\n};\r\nexport const actionTypes = {\r\n        SET_USER: \"SET_USER\",\r\n        SET_TOKEN: \"SET_TOKEN\",\r\n\r\n  };\r\n  \r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n      case actionTypes.SET_TOKEN:\r\n        return {\r\n          ...state,\r\n          token: action.token,\r\n        };\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react'\r\nimport \"./Login.css\"\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./reducer\";\r\n\r\n\r\n    function Login() {\r\n        const [state, dispatch] = useStateValue();\r\n      \r\n      \r\n        const signIn = () => {\r\n          auth\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n              dispatch({\r\n                  type: actionTypes.SET_USER,\r\n                  user:result.user\r\n      })\r\n      console.log(result.user.refreshToken)\r\n      dispatch({\r\n        type: actionTypes.SET_TOKEN,\r\n        token:result.user.refreshToken\r\n      })\r\n      localStorage.setItem(\"User\", JSON.stringify(result.user));\r\n      \r\n      \r\n            })\r\n            .catch((error) => alert(error.message));\r\n        };\r\n    return (\r\n        <div className=\"login\">\r\n             <button className='form-input-btn' onClick={signIn}>\r\n          Sign up\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","\nimport React from 'react';\nimport Chat from './Chat'\nimport Login from './Login';\nimport { useStateValue } from \"./StateProvider\";\nimport {Helmet} from \"react-helmet\";\n\nimport favicon from './favicon copy.ico';\nfunction App() {\n  const [{user,token},dispatch] = useStateValue();\n\nreturn (\n    <div className=\"App\">\n    \n\n{/* <Helmet>\n  <title>ABC</title>\n  <meta name=\"ABC\"  />\n  <link rel=\"icon\" type=\"image/png\" href={favicon} sizes=\"16x16\" />\n\n</Helmet> */}\n\n      \n    {\n\n      user ? <Chat/> : <Login/> \n    }\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n     <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}